############################## build stage #############################################
FROM node:lts-bookworm-slim AS build

# dumb-init - an init system for docker containers so that they respond to signals like "SIGINT" and other similar signals
RUN apt-get update && apt-get install -y --no-install-recommends dumb-init

# Create work directory
WORKDIR /usr/src/app

# providing ownership to node(non-root) user
RUN chown -R node:node /usr/src/app

# Copy package.json and package-lock.json
COPY package*.json .

# Install all dependecies
RUN npm ci

# Copy source files
COPY . .

# build the app
RUN npm run build

############################## production stage #######################################
FROM node:lts-bookworm-slim AS production

# Copy dumb-init from build stage
COPY --from=build /usr/bin/dumb-init /usr/bin/dumb-init

# Set NODE_ENV=production
ENV NODE_ENV production

# run as user - node
USER node

# Create work directory
WORKDIR /usr/src/app

# providing ownership to node(non-root) user
RUN chown -R node:node /usr/src/app

# Copy package.json and package-lock.json
COPY --from=build /usr/src/app/package*.json .

# Install all dependecies
RUN npm ci --omit=dev

# Copy build folder to work directory and provide ownership
COPY --chown=node:node --from=build /usr/src/app/dist ./
COPY --chown=node:node --from=build /usr/src/app/.env ./

EXPOSE 3001

# Run the app
CMD ["dumb-init", "node", "./src/index.js"]